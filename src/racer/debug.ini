;
; Debugging options for Racer
;
car
{
  ; Initial rotational speed
  ;av_yaw=1
  ;av_pitch=1
  ;av_roll=1
  ; Initial rotation (in degrees); Y=heading
  ;rotate_y=180
  ;rotate_z=88
  ; Initial speed
  ;vx=-25
  ;vy=10
  ; 200 km/h = 55.55 m/s
  ;vz=5
  ; Wheel rotation speed at start
  ;wheel_rvx=100
  ; Enable suspension rotational movement?
  suspension=1
  ; Enable gravity working on the body?
  gravity_body=1
  ; Apply friction circle?
  apply_friction_circle=1
  ; Method; 0=Genta (prefers longitudinal forces)
  ;         1=vector trim (equal mix of forces)
  ;         2=void (don't combine forces; should be testing only)
  ;         3=Gregor Veble's combined Pacejka
  friction_circle_method=3
  ; Adjust force direction when wheel starts locking?
  wheel_lock_adjust=1
  ; Apply friction (reducing) curve based on slip velocity?
  use_slip2fc=0
  ; Zero lateral tire forces? (focus on longitudinal only)
  lateral_tire_forces=1
  ; Test for car-track collisions?
  track_collision=1
  ; Use AABBTree to speed up wheel-track collision checking?
  use_aabb_tree=1
  ; Avoid using spline info in the track? (to compare WITH splines)
  no_splines=0
  ; Use suspension force instead of tire rate force to determine
  ; load for Pacejka curves? This may stabilize things a lot during
  ; braking, avoiding the tire's jittering behavior and using the more
  ; gradual and damped suspension force instead. I think that rules
  ; out wheel hop though.
  use_susp_as_load=1
  ; Maximum forces (to avoid sudden explosive physics)
  ; Note that internally also the rotational velocities are limited
  max_force=30000
  max_torque=30000
}
ai
{
  enable=0
}
state
{
  ; Automatically load state at start? (simulates Ctrl-L)
  auto_load=0
}
controls
{
  ; Debugging the engine (also set controls.update to 0 to keep control values)
  ; Throttle 0..1000
  throttle=0
  ; Brakes 0..1000
  ;brakes=1000
  ; Clutch 0..1000
  clutch=000
  ; Initial steering position (-1000..+1000)
  ;steer=500
  ; Turn off steering? (doesn't work at the moment)
  steering=0
  ; Turn off controls altogether?
  update=1
}
timing
{
  ; Speed of simulation; this time (in milliseconds) gives the number
  ; of milliseconds for each integration step. Internally, the granularity
  ; of time is 1/1000th sec. So laptime accuracy upto 1/1000th sec
  ; is possible.
  ; However, this is quite a lot of computing, and some computers may not
  ; be able to catch up with this. In fact, REAL time may then move faster
  ; than the computer can keep up with (in which case FPS becomes 0!).
  ; So I suggest 5ms for example. This will make the simulation run at 200Hz.
  ; Keep it at least below 10; a simulation running at anything less
  ; than 100Hz becomes more and more instable.
  integration_time=5
  ; Draw each frame? For debugging, it is handy to see every integration step,
  ; instead of doing realtime stuff, which may go much to quickly
  draw_every_step=0
  ; Slowmotion inserts <slomo> milliseconds of delay at every drawn frame
  ;slomo=50
  ; Exit after x frames?
  ;frames_max=4
}
stats
{
  ; Line in debug output per gfx frame?
  frame_line=0
  ; Display textual info at wheels? (slow on some Windows 3D cards)
  wheelinfo=0
  ; Show tire forces?
  show_tire_forces=0
  ; Display axis system in each car?
  show_axis_system=0
}
gfx
{
  reflections=0
  ; Display triangles of the spline surface?
  show_spline_tris=0
  ; Show car bounding box?
  show_car_bbox=0
  ; Check OpenGL errors while running? (may slow down things)
  check_opengl_errors=0
}
