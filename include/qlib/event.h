// qlib/event.h - Events & Manager

#ifndef __QLIB_QEVENT_H
#define __QLIB_QEVENT_H

#include <qlib/object.h>

// Q events; for most events <35, they relate directly to X11 events
// for other events, these are generated by Q classes to indicate certain
// events (like; sample looping, pushbutton clicked etc.).
// All this to obtain a higher level of user interfacing (for QM mainly)
// Event ranges:
// 0        no event
// 1-99     primary (system) events (directly generated by X)
// 100-199  secondary events (clicks, changes) indirectly generated by Q
// 200-299  external device events (serial mice)
// 1000+    user events

const int QEVENT_KEYPRESS=2;
const int QEVENT_KEYRELEASE=3;
const int QEVENT_BUTTONPRESS=4;
const int QEVENT_BUTTONRELEASE=5;
const int QEVENT_MOTIONNOTIFY=6;
const int QEVENT_ENTER=7;			// Enter/leave window
const int QEVENT_LEAVE=8;
const int QEVENT_EXPOSE=12;
const int QEVENT_RESIZE=22;			// ConfigureNotify
// Q events
const int QEVENT_CLICK=100;			// Pushbutton click
const int QEVENT_TIMER=101;
const int QEVENT_SETFOCUS=102;			// Getting keyboard focus
const int QEVENT_LOSEFOCUS=103;			// Losing it
const int QEVENT_USER=1000;			// Start of user events

class QApp;
class QWindow;

class QEvent
// An event with assorted args
{
 public:
  
  enum EventTypes
  { 
    // Primary events
    KEYPRESS=2,
    KEYRELEASE=3,
    BUTTONPRESS=4,
    BUTTONRELEASE=5,
    MOTIONNOTIFY=6,
	ENTER,
	LEAVE,
    EXPOSE=12,
	RESIZE=22,
    // Artificial (non-X) primary events
    // 27-7-00: renamed from DOUBLE_CLICK to DBL_CLICK for Win32
    // namespace conflict resolution
    DBL_CLICK=50,		// Mouse button clicked twice quickly

    // Indirect events
    CLICK=100,
    TIMER,
    SETFOCUS,
    LOSEFOCUS,
    CHANGE,
    CLOSE,			// Request to close window

    // External device events (see qsermouse.cpp for example)
    SM_MOTIONNOTIFY=200,
    SM_BUTTONPRESS,
    SM_BUTTONRELEASE,
    TS_MOTIONNOTIFY,		// Touchscreen (Z-coordinates is in 'n')
    TS_BUTTONPRESS,		// Future event to detect presses
    TS_BUTTONRELEASE
  };
  enum EventRanges
  { FIRST_PRIMARY=1,		// Base system events
    FIRST_SECONDARY=100,	// CLICK for example (indirect)
    FIRST_EXTERNAL=200		// Serial mice for example
  };

  int   type;			// QEVENT_xxx
  int   x,y;
  int   wid,hgt;
  int   n;
  int   xRoot,yRoot;		// Absolute root x/y
  void *p;			// Any ptr
  QWindow *win;			// Window above which pointer was

  QEvent()
  { type=0;
    x=y=wid=hgt=n=xRoot=yRoot=0;
    p=0;
    win=0;
  }
};

/*
typedef void (*QEventIdleProc)(void);

class QEventManager : public QObject
{ 
 protected:
  QEventIdleProc idleProc;

 public:
  QEventManager();
  ~QEventManager();

  void SetIdleProc(QEventIdleProc newProc);
  void Run();
};
*/

// Application-wide event handling
void QEventInit();
void QEventQuit();
bool QEventPending();
void QEventPeek(QEvent *e);
void QEventNext(QEvent *e);

// Generating Q events
void QEventPush(QEvent *e);
void QEventDemultiplexExpose(QEvent *e);

// Debugging
void QEventList();

#ifdef WIN32
// Include here because of namespace conflicts with the QEvent message types
#include <winsock.h>
#include <windows.h>
// For Win32, qevent.cpp exports a window procedure through which
// all events flow.
// This is in place of the X11 XNextEvent() call which just
// fetches an event for any window.
LRESULT CALLBACK QEventWindowProc(HWND hWnd,UINT message,
  WPARAM wParam,LPARAM lParam);
#endif

#endif
